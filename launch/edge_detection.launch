<launch>
  
  <include file="$(find realsense2_camera)/launch/rs_rgbd.launch">
  </include>

  <arg name="node_name" default="tube_edge_detection" />

  <arg name="image" default="camera/color/image_raw" />

  <arg name="use_camera_info" default="false" doc="Indicates that the camera_info topic should be subscribed to to get the default input_frame_id. Otherwise the frame from the image message will be used." />
  <arg name="debug_view" default="true" doc="Specify whether the node displays a window to show edge image" />
  <arg name="queue_size" default="5" doc="Specigy queue_size of input image subscribers" />

  <arg name="edge_type" default="0" doc="Specify edge dtection methods. 0: Sobel Derivatives, 1: Lapalace Operator, 2, Canny Edge Detector." />
  <arg name="canny_threshold1" default="100" doc="Specify second canny threashold value." />
  <arg name="canny_threshold2" default="200" doc="Specity first canny threashold value." />
  <arg name="apertureSize" default="3" doc="Aperture size for the Sobel() operator." />
  <arg name="apply_blur_pre" default="true" doc="Flag, applying Blur() to input image" />
  <arg name="postBlurSize" default="13" doc="Aperture size for the Blur() to input image()" />
  <arg name="postBlurSigma" default="3.2" doc="Sigma for the GaussianBlur() to input image." />
  <arg name="apply_blur_post" default="false" doc="Flag, applying GaussinaBlur() to output(edge) image" />
  <arg name="L2gradient" default="false" doc="Flag, L2Gradient" />

  <!-- edge_detection.cpp  -->
  <node name="$(arg node_name)" pkg="opencv_apps" type="edge_detection" >
    <remap from="image" to="$(arg image)" />
    <param name="use_camera_info" value="$(arg use_camera_info)" />
    <param name="debug_view" value="$(arg debug_view)" />
    <param name="queue_size" value="$(arg queue_size)" />
    <param name="edge_type" value="$(arg edge_type)" />
    <param name="canny_threshold1" value="$(arg canny_threshold1)" />
    <param name="canny_threshold2" value="$(arg canny_threshold2)" />
    <param name="apertureSize" value="$(arg apertureSize)" />
    <param name="apply_blur_pre" value="$(arg apply_blur_pre)" />
    <param name="postBlurSize" value="$(arg postBlurSize)" />
    <param name="postBlurSigma" value="$(arg postBlurSigma)" />
    <param name="apply_blur_post" value="$(arg apply_blur_post)" />
    <param name="L2gradient" value="$(arg L2gradient)" />
  </node>

  <!-- セグメンテーションノード (watershed_segmentation) -->
  <!-- <node name="watershed_segmentation" pkg="opencv_apps" type="watershed_segmentation">
    <remap from="image" to="/edge_detection/image" />
    <param name="debug_view" value="true" />
  </node> -->


  <!-- 輪郭検出ノード -->
  <node name="find_contours" pkg="opencv_apps" type="find_contours">
    <remap from="image" to="/edge_detection/image" />
    <param name="debug_view" value="true" />
  </node>

  <!-- エッジからマスク画像を生成 -->
  <node name="edge_to_mask" pkg="pr2_tubes" type="edge2mask.py" output="screen">
    <remap from="~input" to="/edge_detection/image" />
  </node>

  <!-- マスクと深度フィルターを組み合わせる -->
  <node name="apply_mask_to_depth" pkg="nodelet" type="nodelet" args="standalone jsk_pcl/MaskImage">
    <remap from="~input" to="/depth_image_filter/output/mask" />
    <remap from="~mask" to="/edge_to_mask/output/mask" />
    <param name="approximate_sync" value="true" />
  </node>

</launch>